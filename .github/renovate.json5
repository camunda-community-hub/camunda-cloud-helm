{
  "extends": [
    "config:base", "helpers:pinGitHubActionDigests"
  ],
  "labels": ["dependencies"],
  "dependencyDashboard": true,
  "separateMinorPatch": true,
  "minor": {
    "enabled": true
  },
  "patch": {
    "enabled": true
  },
  "helm-values": {
    "fileMatch": ["(^|/).*?values.*?\\.yaml$"]
  },
  // GitHub Actions configuration
  "github-actions": {
    "enabled": true,
    "fileMatch": ["^\\.github/workflows/[^/]+\\.ya?ml$"]
  },
  "packageRules": [
    {
      "matchFileNames": [
        ".github/workflows/*.ya?ml",
        ".github/actions/action.ya?ml",
        "charts/camunda-platform/Chart.yaml",
        "charts/camunda-platform/values*.yaml",
        "charts/camunda-platform/go.*"
      ],
      "matchUpdateTypes": ["minor", "patch", "pin", "digest"],
      // "addLabels": ["automerge"],
      // "automerge": true
    },
    {
      "matchFileNames": [
        "charts/camunda-platform*/Chart.yaml",
        "charts/camunda-platform*/values*.yaml",
        "charts/camunda-platform*/go.*",
      ],
      "matchUpdateTypes": ["patch"],
    },
    {
      // Disable major version update for all Helm components.
      "enabled": false,
      "matchManagers": ["helmv3", "helm-values", "regex"],
      "matchUpdateTypes": ["major"]
    },
    {
      // Disable minor version update for previous Camunda releases which will only get patch updates.
      "enabled": false,
      "matchManagers": ["helm-values", "regex"],
      "matchPaths": [
        "charts/camunda-platform*/values*.yaml",
      ],
      "matchUpdateTypes": ["minor"]
    },
    {
      // Enable non-major version update for current Camunda version.
      "matchDatasources": ["github-releases", "docker", "regex"],
      "matchPaths": ["charts/camunda-platform/values.yaml", "charts/camunda-platform/values-latest.yaml"],
      "matchUpdateTypes": ["minor", "patch"]
    },
    {
      // Enable patch version update for previous Camunda version.
      "matchDatasources": ["github-releases", "docker", "regex"],
      "matchPaths": ["charts/camunda-platform-*/values.yaml", "charts/camunda-platform-*/values-latest.yaml"],
      "matchUpdateTypes": ["patch"]
    },
    {
      // Limit Elasticsearch version to latest supported version in Camunda v8.5.
      // https://docs.camunda.io/docs/reference/supported-environments/#camunda-8-self-managed
      "matchDatasources": ["docker"],
      "matchPaths": ["charts/camunda-platform/values.yaml", "charts/camunda-platform/values-latest.yaml"],
      "matchDepNames": ["bitnami/elasticsearch"],
      "allowedVersions": "~8.12.0"
    },
    {
      // Disable Helm chart upgrades from bitnami/elasticsearch
      "matchDepNames": ["elasticsearch"],
      "matchPaths": ["charts/camunda-platform*/Chart.yaml"],
      "enabled": false
    },
    // Limit tools and libs versions to the actual Distro CI Kubernetes cluster.
    {
      "matchDepPatterns": ["kubectl"],
      "allowedVersions": "<1.28.0"
    },
    {
      "matchDepPatterns": ["k8s.io/.*"],
      "allowedVersions": "<0.28.0"
    }
  ],
  "regexManagers": [
    {
      // This is mainly used to update Camunda unified image tag.
      "fileMatch": ["\\.yaml$"],
      "datasourceTemplate":"github-releases",
      "matchStrings": [
        "# renovate: datasource=github-releases depName=(?<depName>.+?)( versioning=(?<versioning>.+?))?\\s+?tag: (?<currentValue>\\S+)"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    },
    {
      // This is mainly used to update enterprise image tags like Console and Web-Modeler.
      // Console and Web-Modeler Self-Managed versions are different from SaaS versions,
      // hence, we use image tags from Camunda private registry as a source of truth for those components.
      // Another use case is Elasticsearch public Docker registry.
      "fileMatch": ["\\.yaml$"],
      "datasourceTemplate":"docker",
      "matchStrings": [
        "# renovate: datasource=docker depName=(?<depName>[^\\s]+?)(?: (lookupName|packageName)=(?<packageName>[^\\s]+?))?(?: versioning=(?<versioning>[^\\s]+?))?(?: registryUrl=(?<registryUrl>[^\\s]+?))?\\s*?(tag|imageTag): (?<currentValue>\\S+)"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    }
  ],
  "hostRules": [
    {
      "hostType": "docker",
      "matchHost": "https://registry.camunda.cloud",
      "username": "ci-distribution",
      "encrypted": {
        "password": "wcFMA/xDdHCJBTolAQ/7BSbgiur4KfMX0vgTM9T8Rt1pTqby5bR/RW6n/Iq5+bNU8pQne1W6zxaFEagkMMMTx/JtdWl88sDlGFqdG80Oik7Wbb7UDYl39Wdvax0DhmfkT1yqXYToyYz0rXpB9BIllAkfCy9ll8SbZqVBa/NoMPo2Fb8Hj/PiT4xG1U+YoWdsyXFLXz+jKEsRIKXC28ApxqJ7TN4iO5FEWrZIB4Bgtkg+x4FOpCTaS6fwui7FRxfFSGWTFkepr6R/lhPTDCHH7u65Mroff4IjUqfJ5dkGY+49QUGW45toaHXdXV9ZaBIMm+v6cNOOw92P+bidMdhIBLurOBqig24Jj02+wb5J9eKPBP1tvXW0vz1jwhOQIqRmV95zt5JCiQ7s/DByQnUsWfsJ3Vz9rbsUPLwspAhK3ayTl0ltrSj+LaejZei6Ny0Qq4LWTW14RjgLnABRhcK9iefCqVmLbRN+NQDcP0IxjHkFdGgxNaGPkb+jTC7CYJj9TKRHBabauXxvNGrggliUKAlOh8VmpQ1ZFoxryMDQK/HEP/qUU/TmzyAuAtSfrUdOlgYVBEQ7xGH1AfC7fhFUFohAcs4OGCKjbPTCM/LwH9o9zx4hEHh1bCjdgv98Ug4UgYpXBJPJ7Jc2Xng9nCUrkEPPX85kXTlT7T96a5p6CqKBkRNPES88Nj1adP7uANjSYgFIB59DO0tlvxUgBGo+NhjSNQl4wigI0Uc6JGysDb3qXH66nlymaZFzR5jrvqXU+iCMTf/yVyOdAcYQqh1wRHOmuuy0/AK/N0m4fFE3ldsmyV61oCUPxj1sjlNYd1Bte5fy"
      }
    }
  ]
}
