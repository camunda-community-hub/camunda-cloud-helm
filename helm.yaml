---
# Source: camunda-platform/charts/elasticsearch/templates/master/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: camunda-elasticsearch-master
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-20.0.0
    app.kubernetes.io/component: master
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9200
        - port: 9300
---
# Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: camunda-postgresql
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: camunda-platform/charts/identityKeycloak/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: camunda-keycloak
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.7
    helm.sh/chart: identityKeycloak-19.4.1
    app.kubernetes.io/component: keycloak
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 7800
        - port: 8080
---
# Source: camunda-platform/charts/elasticsearch/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-elasticsearch-master
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-20.0.0
    app.kubernetes.io/component: master
automountServiceAccountToken: false
---
# Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-postgresql
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
automountServiceAccountToken: false
---
# Source: camunda-platform/charts/identityKeycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-keycloak
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.7
    helm.sh/chart: identityKeycloak-19.4.1
    app.kubernetes.io/component: keycloak
automountServiceAccountToken: false
---
# Source: camunda-platform/templates/identity/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: identity
    app.kubernetes.io/version: "8.5.0"
automountServiceAccountToken: true
---
# Source: camunda-platform/templates/operate/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: operate
    app.kubernetes.io/version: "8.5.0"
automountServiceAccountToken: false
---
# Source: camunda-platform/templates/optimize/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: optimize
    app.kubernetes.io/version: "8.5.0"
automountServiceAccountToken: false
---
# Source: camunda-platform/templates/tasklist/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: tasklist
    app.kubernetes.io/version: "8.5.0"
automountServiceAccountToken: false
---
# Source: camunda-platform/templates/web-modeler/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-web-modeler
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: web-modeler
    app.kubernetes.io/version: "8.5.0"
automountServiceAccountToken: false
---
# Source: camunda-platform/templates/zeebe-gateway/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: zeebe-gateway
    app.kubernetes.io/version: "8.5.0"
automountServiceAccountToken: false
---
# Source: camunda-platform/templates/zeebe/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: zeebe-broker
    app.kubernetes.io/version: "8.5.0"
automountServiceAccountToken: false
---
# Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-postgresql
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
type: Opaque
data:
  postgres-password: "YnF4SDR4c1duMg=="
  password: "YWV4MmxyZndGbg=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: camunda-platform/charts/identityKeycloak/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-keycloak
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.7
    helm.sh/chart: identityKeycloak-19.4.1
    app.kubernetes.io/component: keycloak
type: Opaque
data:
  admin-password: "MXdyU1lHOWVVRw=="
---
# Source: camunda-platform/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-postgresql-web-modeler
  namespace: "hamza"
  labels:
    app.kubernetes.io/name: postgresql-web-modeler
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "14.5.0"
type: Opaque
data:
  postgres-password: "bXJnejhVRENjcQ=="
  password: "M0FraGRoY2h6RQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: camunda-platform/templates/camunda/secret-connectors.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-connectors-identity-secret
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-10.0.1
    app.kubernetes.io/component: identity
type: Opaque
data:
  connectors-secret: "em95VkhKMGdzWg=="
---
# Source: camunda-platform/templates/camunda/secret-console.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-console-identity-secret
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-10.0.1
    app.kubernetes.io/component: identity
type: Opaque
data:
  console-secret: "YU1LMm1icUR3dg=="
---
# Source: camunda-platform/templates/camunda/secret-operate.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-operate-identity-secret
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-10.0.1
    app.kubernetes.io/component: identity
type: Opaque
data:
  operate-secret: "VjJjWnBqMzFzQg=="
---
# Source: camunda-platform/templates/camunda/secret-optimize.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-optimize-identity-secret
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-10.0.1
    app.kubernetes.io/component: identity
type: Opaque
data:
  optimize-secret: "dXBQZThjWkd0Wg=="
---
# Source: camunda-platform/templates/camunda/secret-tasklist.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-tasklist-identity-secret
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-10.0.1
    app.kubernetes.io/component: identity
type: Opaque
data:
  tasklist-secret: "bEdyM3YwbmMwTg=="
---
# Source: camunda-platform/templates/camunda/secret-zeebe.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-zeebe-identity-secret
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-10.0.1
    app.kubernetes.io/component: identity
type: Opaque
data:
  zeebe-secret: "Wk5sTk82dm9taw=="
---
# Source: camunda-platform/templates/web-modeler/secret-shared.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-web-modeler
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: web-modeler
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
type: Opaque
data:
  pusher-app-secret: V3FGZVFyNlNvMTZpY3c5RFp3ZjU=
---
# Source: camunda-platform/charts/identityKeycloak/templates/configmap-env-vars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-keycloak-env-vars
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.7
    helm.sh/chart: identityKeycloak-19.4.1
    app.kubernetes.io/component: keycloak
data:
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY: "edge"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "camunda-postgresql"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "bitnami_keycloak"
  KEYCLOAK_DATABASE_USER: "bn_keycloak"
  KEYCLOAK_PRODUCTION:  "false"
  KEYCLOAK_ENABLE_HTTPS: "false"
  KEYCLOAK_CACHE_TYPE: "ispn"
  KEYCLOAK_CACHE_STACK: "kubernetes"
  JAVA_OPTS_APPEND: "-Djgroups.dns.query=camunda-keycloak-headless.hamza.svc.cluster.local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KEYCLOAK_LOG_LEVEL: "INFO"
---
# Source: camunda-platform/templates/camunda/configmap-identity-auth.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-camunda-platform-identity-env-vars
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
  annotations:
    {}
data:
  CAMUNDA_IDENTITY_BASEURL: "http://camunda-identity:80/identity"
  CAMUNDA_IDENTITY_TYPE: "KEYCLOAK"
  CAMUNDA_IDENTITY_ISSUER: "https://local.distro.ultrawombat.com/auth/realms/camunda-platform"
  CAMUNDA_IDENTITY_ISSUER_BACKEND_URL: "http://camunda-keycloak:80/auth/realms/camunda-platform"
---
# Source: camunda-platform/templates/camunda/configmap-release.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-camunda-platform-release
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
  annotations:
    {}
data:
  info: |-
    - name: camunda
      namespace: hamza
      version: 10.0.1
      components:
      - name: Keycloak
        id: keycloak
        version: 23.0.7
        url: https://local.distro.ultrawombat.com/auth
      - name: Identity
        id: identity
        version: 8.5.0
        url: https://local.distro.ultrawombat.com/identity
        readiness: http://camunda-identity.hamza:82/actuator/health
        metrics: http://camunda-identity.hamza:82/actuator/prometheus
      - name: Operate
        id: operate
        version: 8.5.0
        url: https://local.distro.ultrawombat.com/operate
        readiness: http://camunda-operate.hamza:80/operate/actuator/health/readiness
        metrics: http://camunda-operate.hamza:80/operate/actuator/prometheus
      - name: Optimize
        id: optimize
        version: 8.5.0
        url: https://local.distro.ultrawombat.com/optimize
        readiness: http://camunda-optimize.hamza:80/optimize/api/readyz
        metrics: http://camunda-optimize.hamza:8092/actuator/prometheus
      - name: Tasklist
        id: tasklist
        version: 8.5.0
        url: https://local.distro.ultrawombat.com/tasklist
        readiness: http://camunda-tasklist.hamza:80/tasklist/actuator/health/readiness
        metrics: http://camunda-tasklist.hamza:80/tasklist/actuator/prometheus
      - name: WebModeler WebApp
        id: webModelerWebApp
        version: 8.5.0
        url: https://local.distro.ultrawombat.com/modeler
        readiness: http://camunda-web-modeler-webapp.hamza:8071/health/readiness
        metrics: http://camunda-web-modeler-webapp.hamza:8071/metrics
      - name: Zeebe Gateway
        id: zeebeGateway
        version: 8.5.0
        urls:
          grpc: https://zeebe.local.distro.ultrawombat.com
          http: https://local.distro.ultrawombat.com
        readiness: http://camunda-zeebe-gateway.hamza:9600/actuator/health/readiness
        metrics: http://camunda-zeebe-gateway.hamza:9600/actuator/prometheus
      - name: Zeebe
        id: zeebe
        version: 8.5.0
        readiness: http://camunda-zeebe.hamza:9600/actuator/health/readiness
        metrics: http://camunda-zeebe.hamza:9600/actuator/prometheus
---
# Source: camunda-platform/templates/connectors/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-connectors-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: connectors
    app.kubernetes.io/version: "8.5.0"
data:
  application.yml: |
    server:
      port: 8080
    camunda:
      operate:
        client:
          url: "http://camunda-operate:80/operate"
      identity:
        audience: "operate-api"
        client-id: "connectors"

    zeebe:
      client:
        broker:
          gateway-address: "camunda-zeebe-gateway:26500"
        security:
          plaintext: true
---
# Source: camunda-platform/templates/identity/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-identity-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: identity
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
data:
  application.yaml: |
    identity:
      url: "https://local.distro.ultrawombat.com/identity"

      authProvider:
        issuer-url: "https://local.distro.ultrawombat.com/auth/realms/camunda-platform"
        backend-url: "http://camunda-keycloak:80/auth/realms/camunda-platform"
    keycloak:
      environment:
        clients:
          - name: Identity
            id: "camunda-identity"
            type: CONFIDENTIAL
            secret: ${IDENTITY_CLIENT_SECRET:}
            root-url: "https://local.distro.ultrawombat.com/identity"
            redirect-uris:
              - "/auth/login-callback"
      presets:
        tasklist:
          clients:
            - name: Tasklist
              id: tasklist
              type: confidential
              secret: ${KEYCLOAK_INIT_TASKLIST_SECRET:}
              root-url: "https://local.distro.ultrawombat.com/tasklist"
              redirect-uris:
                - "/identity-callback"
        operate:
          clients:
            - name: Operate
              id: ${KEYCLOAK_INIT_OPERATE_CLIENT_ID:operate}
              type: confidential
              secret: ${KEYCLOAK_INIT_OPERATE_SECRET:}
              root-url: "https://local.distro.ultrawombat.com/operate"
              redirect-uris:
                - "/identity-callback"
        optimize:
          clients:
            - name: Optimize
              id: ${KEYCLOAK_INIT_OPTIMIZE_CLIENT_ID:optimize}
              type: confidential
              secret: ${KEYCLOAK_INIT_OPTIMIZE_SECRET:}
              root-url: "https://local.distro.ultrawombat.com/optimize"
              redirect-uris:
                - "/api/authentication/callback"
        console:
          clients:
            - name: "Console"
              id: ${KEYCLOAK_INIT_CONSOLE_CLIENT_ID:console}
              type: public
              root-url: "http://localhost:8080"
              redirect-uris:
                - "/"
    server:
      port: 8080
      servlet:
        context-path: "/identity"

    spring:
      profiles:
        active: keycloak

    camunda:
      identity:
---
# Source: camunda-platform/templates/operate/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-operate-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: operate
    app.kubernetes.io/version: "8.5.0"
data:
  application.yml: |
    server:
      servlet:
        context-path: "/operate"
    spring:
      profiles:
        active: "identity-auth"
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: "http://camunda-keycloak:80/auth/realms/camunda-platform"
              jwk-set-uri: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"

    camunda:
      identity:
        clientId: "operate"
        audience: "operate-api"
    
    # Operate configuration file
    camunda.operate:
      identity:
        redirectRootUrl: "https://local.distro.ultrawombat.com"
    
      # ELS instance to store Operate data
      elasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: camunda-elasticsearch
        # Transport port
        port: 9200
        # Elasticsearch full url
        url: "http://camunda-elasticsearch:9200"
      # ELS instance to export Zeebe data to
      zeebeElasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: camunda-elasticsearch
        # Transport port
        port: 9200
        # Index prefix, configured in Zeebe Elasticsearch exporter
        prefix: zeebe-record
        # Elasticsearch full url
        url: "http://camunda-elasticsearch:9200"
      # Zeebe instance
      zeebe:
        # Broker contact point
        brokerContactPoint: "camunda-zeebe-gateway:26500"
    logging:
      level:
        ROOT: INFO
        io.camunda.operate: INFO
    #Spring Boot Actuator endpoints to be exposed
    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus,loggers,usage-metrics,backups
---
# Source: camunda-platform/templates/optimize/configmap.yaml
kind: ConfigMap
metadata:
  name: camunda-optimize-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: optimize
    app.kubernetes.io/version: "8.5.0"
apiVersion: v1
data:
  environment-config.yaml: |
    container:
      contextPath: "/optimize"

    zeebe:
      enabled: true
      partitionCount: 3
    es:
      connection:
        nodes:
          - host: "camunda-elasticsearch"
            httpPort: 9200

    spring:
      profiles:
        active: "ccsm"

    security:
      auth:
        cookie:
          same-site:
            enabled: false
        ccsm:
          redirectRootUrl: "https://local.distro.ultrawombat.com/optimize"
    api:
      audience: "optimize-api"
      jwtSetUri: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
  application-ccsm.yaml: |
    camunda:
      identity:
        clientId: "optimize"
        audience: "optimize-api"
        issuer: "https://local.distro.ultrawombat.com/auth/realms/camunda-platform"
        issuerBackendUrl: "http://camunda-keycloak:80/auth/realms/camunda-platform"
---
# Source: camunda-platform/templates/tasklist/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-tasklist-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: tasklist
    app.kubernetes.io/version: "8.5.0"
data:
  application.yml: |
    server:
      servlet:
        contextPath: "/tasklist"
    spring:
      profiles:
        active: identity-auth
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: "http://camunda-keycloak:80/auth/realms/camunda-platform"
              jwk-set-uri: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"

    camunda:
      identity:
        clientId: "tasklist"
        audience: "tasklist-api"

    # Tasklist configuration file
    camunda.tasklist:

      identity:
        redirectRootUrl: "https://local.distro.ultrawombat.com"
        userAccessRestrictions:
          enabled: "true"

      # Set Tasklist username and password.
      # If user with <username> does not exists it will be created.
      # Default: demo/demo
      #username:
      #password:
      # ELS instance to store Tasklist data
      elasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: camunda-elasticsearch
        # Transport port
        port: 9200
        # Elasticsearch full url
        url: "http://camunda-elasticsearch:9200"
      # ELS instance to export Zeebe data to
      zeebeElasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: camunda-elasticsearch
        # Transport port
        port: 9200
        # Index prefix, configured in Zeebe Elasticsearch exporter
        prefix: zeebe-record
        # Elasticsearch full url
        url: "http://camunda-elasticsearch:9200"
      # Zeebe instance
      zeebe:
        # Broker contact point
        brokerContactPoint: "camunda-zeebe-gateway:26500"
        restAddress: "http://camunda-zeebe-gateway:8080"
    #Spring Boot Actuator endpoints to be exposed
    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus,loggers,usage-metrics,backups
    # Enable or disable metrics
    #management.metrics.export.prometheus.enabled: false
---
# Source: camunda-platform/templates/web-modeler/configmap-restapi.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-web-modeler-restapi-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: web-modeler
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
data:
  pusher-app-id: web-modeler
  pusher-app-key: G43uwvmdEmM9axYRW2pQ
  application.yaml: |
    camunda:
      identity:
        base-url: "http://camunda-identity:80/identity"
        issuer: "https://local.distro.ultrawombat.com/auth/realms/camunda-platform"
        issuerBackendUrl: "http://camunda-keycloak:80/auth/realms/camunda-platform"
        type: "KEYCLOAK"

      modeler:
        pusher:
          host: "camunda-web-modeler-websockets"
          port: 80
    
        security:
          jwt:
            issuer:
              backend-url: "http://camunda-keycloak:80/auth/realms/camunda-platform"
            audience:
              internal-api: "web-modeler-api"
              public-api: "web-modeler-public-api"
        mail:
          from-address: "noreply@example.com"
          from-name: "Camunda 8"

        server:
          url: "https://local.distro.ultrawombat.com/modeler"
    spring:
      datasource:
        url: "jdbc:postgresql://camunda-postgresql-web-modeler:5432/web-modeler"
        username: "web-modeler"

      mail:
        host: ""
        port: 587
        properties:
          mail.smtp.auth: true
          mail.smtp.starttls.enable: true
          mail.smtp.starttls.required: true

      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: "https://local.distro.ultrawombat.com/auth/realms/camunda-platform"
---
# Source: camunda-platform/templates/web-modeler/configmap-shared.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-web-modeler-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: web-modeler
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
data:
  pusher-app-id: web-modeler
  pusher-app-key: ISuX1IgxTt8rwtvfxDUQ
---
# Source: camunda-platform/templates/web-modeler/configmap-webapp.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-web-modeler-webapp-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: web-modeler
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
data:
  pusher-app-id: web-modeler
  pusher-app-key: krnRt82DiLLDNoMXQlhF
  application.toml: |
    httpWorkers = 2

    [restapi]
    host = "camunda-web-modeler-restapi"
    port = "80"
    managementPort = "8091"

    [server]
    url = "https://local.distro.ultrawombat.com/modeler"
    httpsOnly = "true"

    [oAuth2]
    type = "KEYCLOAK"
    clientId = "web-modeler"

    [oAuth2.token]
    jwksUrl = "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
    audience = "web-modeler-api"
    issuer = "https://local.distro.ultrawombat.com/auth/realms/camunda-platform"

    [pusher]
    host = "camunda-web-modeler-websockets"
    port = "80"

    [client.pusher]
    host = "local.distro.ultrawombat.com"
    port = "443"
    path = "/modeler-ws"
    forceTLS = "true"

    [identity]
    baseUrl = "http://camunda-identity:80/identity"
---
# Source: camunda-platform/templates/web-modeler/configmap-websockets.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-web-modeler-websockets-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: web-modeler
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
data:
  application.yaml: |
---
# Source: camunda-platform/templates/zeebe-gateway/configmap.yaml
kind: ConfigMap
metadata:
  name: camunda-zeebe-gateway-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: zeebe-gateway
    app.kubernetes.io/version: "8.5.0"
apiVersion: v1
data:
  gateway-log4j2.xml: |
  application.yaml: |
    management:

    spring:
      profiles:
        active: "identity-auth"

    server:
      address: "0.0.0.0"
      port: "8080"
    camunda:
      identity:
        type: "KEYCLOAK"
        issuerBackendUrl: "http://camunda-keycloak:80/auth/realms/camunda-platform"
        audience: "zeebe-api"
    zeebe:
      gateway:
        security:
          authentication:
            mode: identity
        monitoring:
          host: 0.0.0.0
          port: "9600"
        cluster:
          clusterName: camunda-zeebe
          port: "26502"
        network:
          host: 0.0.0.0
          port: "26500"
---
# Source: camunda-platform/templates/zeebe/configmap.yaml
kind: ConfigMap
metadata:
  name: camunda-zeebe-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: zeebe-broker
    app.kubernetes.io/version: "8.5.0"
apiVersion: v1
data:
  application.yaml: |
    zeebe:
      broker:
        exporters:
          elasticsearch:
            className: "io.camunda.zeebe.exporter.ElasticsearchExporter"
            args:
              url: "http://camunda-elasticsearch:9200"
              index:
                prefix: "zeebe-record"
        gateway:
          enable: true
          network:
            port: 26500
          security:
            enabled: false
            authentication:
              mode: none
        network:
          host: 0.0.0.0
          commandApi:
            port: 26501
          internalApi:
            port: 26502
          monitoringApi:
            port: "9600"
        cluster:
          clusterSize: "1"
          replicationFactor: "1"
          partitionsCount: "1"
          clusterName: camunda-zeebe
        threads:
          cpuThreadCount: "3"
          ioThreadCount: "3"
  startup.sh: |
    #!/usr/bin/env bash
    set -eux -o pipefail
    export ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID:-$[${K8S_NAME##*-} * 1 + 0]}

    if [ "$(ls -A /exporters/)" ]; then
      mkdir -p /usr/local/zeebe/exporters/
      cp -a /exporters/*.jar /usr/local/zeebe/exporters/
    else
      echo "No exporters available."
    fi
    exec /usr/local/zeebe/bin/broker

  broker-log4j2.xml: |
---
# Source: camunda-platform/charts/elasticsearch/templates/master/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-elasticsearch-master-hl
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-20.0.0
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: camunda-platform/charts/elasticsearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-elasticsearch
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-20.0.0
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
      nodePort: null
    - name: tcp-transport
      port: 9300
      nodePort: null
  selector:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-postgresql-hl
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-postgresql
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/identityKeycloak/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-keycloak-headless
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.7
    helm.sh/chart: identityKeycloak-19.4.1
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: camunda-platform/charts/identityKeycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-keycloak
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.7
    helm.sh/chart: identityKeycloak-19.4.1
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: camunda-platform/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-postgresql-web-modeler-hl
  namespace: "hamza"
  labels:
    app.kubernetes.io/name: postgresql-web-modeler
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "14.5.0"
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql-web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-postgresql-web-modeler
  namespace: "hamza"
  labels:
    app.kubernetes.io/name: postgresql-web-modeler
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "14.5.0"
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql-web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/templates/connectors/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: connectors
    app.kubernetes.io/version: "8.5.0"
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: connectors
---
# Source: camunda-platform/templates/identity/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: identity
    app.kubernetes.io/version: "8.5.0"
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8080
      protocol: TCP
    - port: 82
      name: metrics
      targetPort: 8082
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: identity
---
# Source: camunda-platform/templates/operate/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: operate
    app.kubernetes.io/version: "8.5.0"
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: operate
---
# Source: camunda-platform/templates/optimize/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: optimize
    app.kubernetes.io/version: "8.5.0"
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8090
      protocol: TCP
    - port: 8092
      name: management
      targetPort: 8092
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: optimize
---
# Source: camunda-platform/templates/tasklist/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: tasklist
    app.kubernetes.io/version: "8.5.0"
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: tasklist
---
# Source: camunda-platform/templates/web-modeler/service-restapi.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-web-modeler-restapi
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: restapi
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8081
      protocol: TCP
    - port: 8091
      name: http-management
      targetPort: 8091
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: restapi
---
# Source: camunda-platform/templates/web-modeler/service-webapp.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-web-modeler-webapp
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: webapp
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8070
      protocol: TCP
    - port: 8071
      name: http-management
      targetPort: 8071
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: webapp
---
# Source: camunda-platform/templates/web-modeler/service-websockets.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-web-modeler-websockets
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: websockets
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8060
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: websockets
---
# Source: camunda-platform/templates/zeebe-gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: zeebe-gateway
    app.kubernetes.io/version: "8.5.0"
  annotations:
spec:
  type: ClusterIP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-gateway
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26500
      protocol: TCP
      name: gateway
    - port: 8080
      protocol: TCP
      name: rest
---
# Source: camunda-platform/templates/zeebe/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "camunda-zeebe"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: zeebe-broker
    app.kubernetes.io/version: "8.5.0"
  annotations:
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26502
      protocol: TCP
      name: internal
    - port: 26501
      protocol: TCP
      name: command
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-broker
---
# Source: camunda-platform/templates/connectors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: connectors
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: connectors
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: connectors
        app.kubernetes.io/version: "8.5.0"
      annotations:
        checksum/config: 52c240e2d58b2698b6dac1d02c6cb6a4becf362527f70e6d0ac0034220996b07
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: connectors
          image: camunda/connectors-bundle:8.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: CAMUNDA_IDENTITY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-connectors-identity-secret
                  key: connectors-secret
            - name: ZEEBE_CLIENT_ID
              value: "zeebe"
            - name: ZEEBE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-zeebe-identity-secret
                  key: zeebe-secret
            - name: ZEEBE_AUTHORIZATION_SERVER_URL
              value: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
            - name: ZEEBE_TOKEN_AUDIENCE
              value: "zeebe-api"
          envFrom:
            - configMapRef:
                name: camunda-camunda-platform-identity-env-vars
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 1Gi
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - name: config
              mountPath: /config/application.yml
              subPath: application.yml
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: camunda-connectors-configuration
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
---
# Source: camunda-platform/templates/identity/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: identity
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: identity
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: identity
        app.kubernetes.io/version: "8.5.0"
      annotations:
        checksum/config: 05b49ad3cd689b6ded15297ee475bb44372a7ee83bfae0c2ec9cebf423606102
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: camunda-platform
          image: camunda/identity:8.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: KEYCLOAK_INIT_OPERATE_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-operate-identity-secret
                  key: operate-secret
            - name: KEYCLOAK_INIT_CONSOLE_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-console-identity-secret
                  key: console-secret
            - name: KEYCLOAK_INIT_TASKLIST_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-tasklist-identity-secret
                  key: tasklist-secret
            - name: KEYCLOAK_INIT_OPTIMIZE_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-optimize-identity-secret
                  key: optimize-secret
            - name: KEYCLOAK_INIT_WEBMODELER_ROOT_URL
              value: "https://local.distro.ultrawombat.com/modeler"
            - name: KEYCLOAK_INIT_ZEEBE_NAME
              value: "Zeebe"
            - name: KEYCLOAK_CLIENTS_0_NAME
              value: Connectors
            - name: KEYCLOAK_CLIENTS_0_ID
              value: connectors
            - name: KEYCLOAK_CLIENTS_0_SECRET
              valueFrom:
                secretKeyRef:
                  key: connectors-secret
                  name: camunda-connectors-identity-secret
            - name: KEYCLOAK_CLIENTS_0_ROOT_URL
              value: http://placeholder
            - name: KEYCLOAK_CLIENTS_0_REDIRECT_URIS_0
              value: /
            - name: KEYCLOAK_CLIENTS_0_PERMISSIONS_0_RESOURCE_SERVER_ID
              value: operate-api
            - name: KEYCLOAK_CLIENTS_0_PERMISSIONS_0_DEFINITION
              value: "read:*"
            - name: KEYCLOAK_CLIENTS_1_NAME
              value: "Zeebe"
            - name: KEYCLOAK_CLIENTS_1_ID
              value: "zeebe"
            - name: KEYCLOAK_CLIENTS_1_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-zeebe-identity-secret
                  key: zeebe-secret
            - name: KEYCLOAK_CLIENTS_1_TYPE
              value: "M2M"
            - name: KEYCLOAK_CLIENTS_1_PERMISSIONS_0_RESOURCE_SERVER_ID
              value: "zeebe-api"
            - name: KEYCLOAK_CLIENTS_1_PERMISSIONS_0_DEFINITION
              value: "write:*"
            - name: KEYCLOAK_URL
              value: "http://camunda-keycloak:80/auth"
            - name: KEYCLOAK_SETUP_USER
              value: "admin"
            - name: KEYCLOAK_SETUP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-keycloak
                  key: admin-password
            - name: KEYCLOAK_USERS_0_USERNAME
              value: "demo"
            - name: KEYCLOAK_USERS_0_PASSWORD
              value: "demo"
            - name: KEYCLOAK_USERS_0_EMAIL
              value: "demo@example.org"
            - name: KEYCLOAK_USERS_0_FIRST_NAME
              value: "Demo"
            - name: KEYCLOAK_USERS_0_LAST_NAME
              value: "User"
            - name: KEYCLOAK_USERS_0_ROLES_0
              value: "Identity"
            - name: KEYCLOAK_USERS_0_ROLES_1
              value: "Operate"
            - name: KEYCLOAK_USERS_0_ROLES_2
              value: "Tasklist"
            - name: KEYCLOAK_USERS_0_ROLES_3
              value: "Optimize"
            - name: KEYCLOAK_USERS_0_ROLES_4
              value: "Web Modeler"
            - name: KEYCLOAK_USERS_0_ROLES_5
              value: "Console"
            - name: KEYCLOAK_CLIENTS_2_ID
              value: test
            - name: KEYCLOAK_CLIENTS_2_NAME
              value: Test
            - name: KEYCLOAK_CLIENTS_2_SECRET
              value: test_token
            - name: KEYCLOAK_CLIENTS_2_REDIRECT_URIS_0
              value: /dummy
            - name: KEYCLOAK_CLIENTS_2_ROOT_URL
              value: http://dummy
            - name: KEYCLOAK_CLIENTS_2_TYPE
              value: CONFIDENTIAL
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_0_RESOURCE_SERVER_ID
              value: camunda-identity-resource-server
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_0_DEFINITION
              value: read
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_1_RESOURCE_SERVER_ID
              value: camunda-identity-resource-server
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_1_DEFINITION
              value: write
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_2_RESOURCE_SERVER_ID
              value: operate-api
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_2_DEFINITION
              value: read:*
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_3_RESOURCE_SERVER_ID
              value: operate-api
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_3_DEFINITION
              value: write:*
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_4_RESOURCE_SERVER_ID
              value: tasklist-api
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_4_DEFINITION
              value: read:*
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_5_RESOURCE_SERVER_ID
              value: tasklist-api
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_5_DEFINITION
              value: write:*
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_6_RESOURCE_SERVER_ID
              value: optimize-api
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_6_DEFINITION
              value: write:*
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_7_RESOURCE_SERVER_ID
              value: zeebe-api
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_7_DEFINITION
              value: write:*
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_8_RESOURCE_SERVER_ID
              value: web-modeler-api
            - name: KEYCLOAK_CLIENTS_2_PERMISSIONS_8_DEFINITION
              value: write:*
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 600m
              memory: 400Mi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8082
              name: metrics
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health
              scheme: HTTP
              port: metrics
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - name: config
              mountPath: /app/config/application.yaml
              subPath: application.yaml

      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: camunda-identity-configuration
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
---
# Source: camunda-platform/templates/operate/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: operate
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: operate
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: operate
        app.kubernetes.io/version: "8.5.0"
      annotations:
        checksum/config: 3b57a42a1bafdd4c4f08fb0a5f01052aff296a6165fd98e99e24e5fe15290401
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: operate
          image: camunda/operate:8.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: CAMUNDA_IDENTITY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-operate-identity-secret
                  key: operate-secret
            - name: ZEEBE_CLIENT_ID
              value: "zeebe"
            - name: ZEEBE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-zeebe-identity-secret
                  key: zeebe-secret
            - name: ZEEBE_AUTHORIZATION_SERVER_URL
              value: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
            - name: ZEEBE_TOKEN_AUDIENCE
              value: "zeebe-api"
            - name: ZEEBE_CLIENT_CONFIG_PATH
              value: /tmp/zeebe_auth_cache
          envFrom:
            - configMapRef:
                name: camunda-camunda-platform-identity-env-vars
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 600m
              memory: 400Mi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /operate/actuator/health/readiness
              scheme: HTTP
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /usr/local/operate/config/application.yml
              subPath: application.yml
            - name: tmp
              mountPath: /tmp
            - name: camunda
              mountPath: /camunda
      volumes:
        - name: config
          configMap:
            name: camunda-operate-configuration
            defaultMode: 484
        - name: tmp
          emptyDir: {}
        - name: camunda
          emptyDir: {}
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
---
# Source: camunda-platform/templates/optimize/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: optimize
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: optimize
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: optimize
        app.kubernetes.io/version: "8.5.0"
      annotations:
        checksum/config: 0665c8bc4bae5af2fa79020b8d956956f810252aaf4a95283aac669a2f52b14d
    spec:
      imagePullSecrets:
        []
      initContainers:
        - name: migration
          image: camunda/optimize:8.5.0
          command: ['./upgrade/upgrade.sh', '--skip-warning']
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: OPTIMIZE_ELASTICSEARCH_HOST
              value: "camunda-elasticsearch"
            - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
              value: "9200"
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 600m
              memory: 1Gi
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /camunda
              name: camunda
            - mountPath: /optimize/config/environment-config.yaml
              subPath: environment-config.yaml
              name: environment-config
            - mountPath: /optimize/config/application-ccsm.yaml
              subPath: application-ccsm.yaml
              name: environment-config
      containers:
        - name: optimize
          image: camunda/optimize:8.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: CAMUNDA_OPTIMIZE_CONTEXT_PATH
              value: "/optimize"
            - name: OPTIMIZE_ELASTICSEARCH_HOST
              value: "camunda-elasticsearch"
            - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
              value: "9200"
            - name: SPRING_PROFILES_ACTIVE
              value: ccsm
            - name: CAMUNDA_IDENTITY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-optimize-identity-secret
                  key: optimize-secret
          envFrom:
            - configMapRef:
                name: camunda-camunda-platform-identity-env-vars
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 600m
              memory: 1Gi
          ports:
            - containerPort: 8090
              name: http
              protocol: TCP
            - containerPort: 8092
              name: management
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /optimize/api/readyz
              scheme: HTTP
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /camunda
              name: camunda
            - mountPath: /optimize/config/environment-config.yaml
              subPath: environment-config.yaml
              name: environment-config
            - mountPath: /optimize/config/application-ccsm.yaml
              subPath: application-ccsm.yaml
              name: environment-config
      volumes:
        - name: tmp
          emptyDir: {}
        - name: camunda
          emptyDir: {}
        - name: environment-config
          configMap:
            name: camunda-optimize-configuration
            defaultMode: 492
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
---
# Source: camunda-platform/templates/tasklist/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: tasklist
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: tasklist
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: tasklist
        app.kubernetes.io/version: "8.5.0"
      annotations:
        checksum/config: ca55eb1a2981dbe7a404b053581c1550aa8cdf3cb05d85014b227f7383bb28f0
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: tasklist
          image: camunda/tasklist:8.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: "/tasklist"
            - name: CAMUNDA_IDENTITY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-tasklist-identity-secret
                  key: tasklist-secret
            - name: ZEEBE_CLIENT_ID
              value: "zeebe"
            - name: ZEEBE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-zeebe-identity-secret
                  key: zeebe-secret
            - name: ZEEBE_AUTHORIZATION_SERVER_URL
              value: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
            - name: ZEEBE_TOKEN_AUDIENCE
              value: "zeebe-api"
            - name: HOME
              value: /parent
            - name: ZEEBE_CLIENT_CONFIG_PATH
              value: /tmp/zeebe_auth_cache
          envFrom:
            - configMapRef:
                name: camunda-camunda-platform-identity-env-vars
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 400m
              memory: 1Gi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /tasklist/actuator/health/readiness
              scheme: HTTP
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /app/resources/application.yml
              subPath: application.yml
            - name: config
              mountPath: /usr/local/tasklist/config/application.yml
              subPath: application.yml
            - mountPath: /tmp
              name: tmp
            - mountPath: /camunda
              name: camunda
      volumes:
        - name: config
          configMap:
            name: camunda-tasklist-configuration
            defaultMode: 484
        - name: tmp
          emptyDir: {}
        - name: camunda
          emptyDir: {}
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
---
# Source: camunda-platform/templates/web-modeler/deployment-restapi.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-web-modeler-restapi
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: restapi
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: web-modeler
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: restapi
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: web-modeler
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: restapi
    spec:
      imagePullSecrets:
        - name: registry-camunda-cloud
      initContainers:
        []
      containers:
        - name: web-modeler-restapi
          image: "registry.camunda.cloud/web-modeler-ee/modeler-restapi:8.5.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: JAVA_OPTIONS
              value: "-Xmx1536m"
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-postgresql-web-modeler
                  key: password
            - name: RESTAPI_PUSHER_APP_ID
              valueFrom:
                configMapKeyRef:
                  name: camunda-web-modeler-configuration
                  key: pusher-app-id
            - name: RESTAPI_PUSHER_KEY
              valueFrom:
                configMapKeyRef:
                  name: camunda-web-modeler-configuration
                  key: pusher-app-key
            - name: RESTAPI_PUSHER_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-web-modeler
                  key: pusher-app-secret
            - name: ZEEBE_CLIENT_CONFIG_PATH
              value: /tmp/zeebe_client_cache.txt
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          ports:
            - containerPort: 8081
              name: http
              protocol: TCP
            - containerPort: 8091
              name: http-management
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: http-management
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /home/runner/config/application.yaml
              subPath: application.yaml
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: camunda-web-modeler-restapi-configuration
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
---
# Source: camunda-platform/templates/web-modeler/deployment-webapp.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-web-modeler-webapp
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: webapp
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: web-modeler
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: webapp
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: web-modeler
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: webapp
    spec:
      imagePullSecrets:
        - name: registry-camunda-cloud
      initContainers:
        []
      containers:
        - name: web-modeler-webapp
          image: "registry.camunda.cloud/web-modeler-ee/modeler-webapp:8.5.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: NODE_ENV
              value: "production"
            - name: NODE_OPTIONS
              value: "--max-old-space-size=128"
            - name: PUSHER_APP_ID
              valueFrom:
                configMapKeyRef:
                  name: camunda-web-modeler-configuration
                  key: pusher-app-id
            - name: PUSHER_KEY
              valueFrom:
                configMapKeyRef:
                  name: camunda-web-modeler-configuration
                  key: pusher-app-key
            - name: PUSHER_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-web-modeler
                  key: pusher-app-secret
            - name: CLIENT_PUSHER_KEY
              valueFrom:
                configMapKeyRef:
                  name: camunda-web-modeler-configuration
                  key: pusher-app-key
          args:
            - application.toml
          resources:
            limits:
              cpu: 800m
              memory: 512Mi
            requests:
              cpu: 400m
              memory: 256Mi
          ports:
            - containerPort: 8070
              name: http
              protocol: TCP
            - containerPort: 8071
              name: http-management
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: http-management
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /home/webapp/application.toml
              subPath: application.toml
      volumes:
        - name: config
          configMap:
            name: camunda-web-modeler-webapp-configuration
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
---
# Source: camunda-platform/templates/web-modeler/deployment-websockets.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-web-modeler-websockets
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: websockets
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: web-modeler
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: websockets
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: web-modeler
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: websockets
    spec:
      imagePullSecrets:
        - name: registry-camunda-cloud
      initContainers:
        []
      containers:
        - name: web-modeler-websockets
          image: "registry.camunda.cloud/web-modeler-ee/modeler-websockets:8.5.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: APP_NAME
              value: "Web Modeler WebSockets"
            - name: PUSHER_APP_ID
              valueFrom:
                configMapKeyRef:
                  name: camunda-web-modeler-configuration
                  key: pusher-app-id
            - name: PUSHER_APP_KEY
              valueFrom:
                configMapKeyRef:
                  name: camunda-web-modeler-configuration
                  key: pusher-app-key
            - name: PUSHER_APP_SECRET
              valueFrom:
                secretKeyRef:
                  name: camunda-web-modeler
                  key: pusher-app-secret
            - name: PUSHER_APP_CLUSTER
              value: "web-modeler"
            - name: PUSHER_APP_PATH
              value: "/modeler-ws"
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          ports:
            - containerPort: 8060
              name: http
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /home/webapp/config/application.yaml
              subPath: application.yaml
      volumes:
        - name: config
          configMap:
            name: camunda-web-modeler-websockets-configuration
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
---
# Source: camunda-platform/templates/zeebe-gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: zeebe-gateway
    app.kubernetes.io/version: "8.5.0"
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-gateway
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: zeebe-gateway
        app.kubernetes.io/version: "8.5.0"
      annotations:
        checksum/config: 8cdb81b986ae9ee23f41d81bb78c5c4d6190aa05d989fc6522ea05791f3e8782
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: zeebe-gateway
          image: camunda/zeebe:8.5.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9600
              name: http
            - containerPort: 26500
              name: gateway
            - containerPort: 26502
              name: internal
            - containerPort: 8080
              name: rest
          env:
            - name: ZEEBE_STANDALONE_GATEWAY
              value: "true"
            - name: ZEEBE_GATEWAY_CLUSTER_MEMBERID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ZEEBE_LOG_LEVEL
              value: "info"
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+ExitOnOutOfMemoryError"
            - name: ZEEBE_GATEWAY_CLUSTER_INITIALCONTACTPOINTS
              value: camunda-zeebe:26502
            - name: ZEEBE_GATEWAY_CLUSTER_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - name: config
              mountPath: /usr/local/zeebe/config/application.yaml
              subPath: application.yaml
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              scheme: HTTP
              port: 9600
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 400m
              memory: 450Mi
            requests:
              cpu: 400m
              memory: 450Mi
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: camunda-zeebe-gateway-configuration
            defaultMode: 484
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
  # yamllint disable
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - zeebe-gateway
            topologyKey: kubernetes.io/hostname
  # yamllint enable
---
# Source: camunda-platform/charts/elasticsearch/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-elasticsearch-master
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-20.0.0
    app.kubernetes.io/component: master
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: master
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  serviceName: camunda-elasticsearch-master-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.12.2
        helm.sh/chart: elasticsearch-20.0.0
        app.kubernetes.io/component: master
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: master
      annotations:
    spec:
      serviceAccountName: camunda-elasticsearch-master
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:12-debian-12-r16
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
        - name: copy-default-plugins
          image: docker.io/bitnami/elasticsearch:8.12.2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 2Gi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              . /opt/bitnami/scripts/elasticsearch-env.sh

              if ! is_dir_empty "$DB_DEFAULT_PLUGINS_DIR"; then
                  cp -nr / "$DB_DEFAULT_PLUGINS_DIR"/* /plugins
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /plugins
              subPath: app-plugins-dir
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.12.2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "no"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "master"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "elastic"
            
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "1024m"
            - name: ELASTICSEARCH_ENABLE_REST_TLS
              value: "false"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 2Gi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/config
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/logs
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/plugins
              subPath: app-plugins-dir
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "15Gi"
---
# Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-postgresql
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: camunda-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: camunda-postgresql
      labels:
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-14.3.3
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: camunda-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: camunda
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.6.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_keycloak"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "bitnami_keycloak"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/logs
              subPath: app-logs-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: camunda-platform/charts/identityKeycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-keycloak
  namespace: "hamza"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.7
    helm.sh/chart: identityKeycloak-19.4.1
    app.kubernetes.io/component: keycloak
spec:
  replicas: 1
  revisionHistoryLimit: 10
  podManagementPolicy: Parallel
  serviceName: camunda-keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: f494ccddf553800e59a17f5abe4172f231f236488c8bd3c6c220f1b51fa5b525
        checksum/secrets: e9e6c8d6822a60cd4c508247589c3f4acc1d128c4e8e400fee51311dd76587bc
      labels:
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/version: 23.0.7
        helm.sh/chart: identityKeycloak-19.4.1
        app.kubernetes.io/component: keycloak
    spec:
      serviceAccountName: camunda-keycloak
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: camunda
                    app.kubernetes.io/name: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        supplementalGroups: []
        sysctls: []
      enableServiceLinks: true
      initContainers:
        - name: init-quarkus-directory
          image: docker.io/bitnami/keycloak:23.0.7
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              cp -r /opt/bitnami/keycloak/lib/quarkus/* /quarkus
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /quarkus
              subPath: app-quarkus-dir
        - command:
          - sh
          - -c
          - cp -a /app/keycloak-theme/* /mnt
          image: 'camunda/identity:latest'
          imagePullPolicy: 'Always'
          name: copy-camunda-theme
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
          - mountPath: /mnt
            name: camunda-theme
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:23.0.7
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-keycloak
                  key: admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-postgresql
                  key: password
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/auth/"
            - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
              value: 'true'
          envFrom:
            - configMapRef:
                name: camunda-keycloak-env-vars
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: infinispan
              containerPort: 7800
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /auth/
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /auth/realms/master
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/lib/quarkus
              subPath: app-quarkus-dir
            - mountPath: /opt/bitnami/keycloak/themes/identity
              name: camunda-theme
            - mountPath: /opt/bitnami/keycloak/data/tmp
              name: data-tmp
      volumes:
        - name: empty-dir
          emptyDir: {}
        - emptyDir: {}
          name: data-tmp
        - emptyDir:
            sizeLimit: 10Mi
          name: camunda-theme
---
# Source: camunda-platform/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-postgresql-web-modeler
  namespace: "hamza"
  labels:
    app.kubernetes.io/name: postgresql-web-modeler
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "14.5.0"
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: camunda-postgresql-web-modeler-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql-web-modeler
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: camunda-postgresql-web-modeler
      labels:
        app.kubernetes.io/name: postgresql-web-modeler
        helm.sh/chart: postgresql-11.9.13
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "14.5.0"
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: camunda
                    app.kubernetes.io/name: postgresql-web-modeler
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0-debian-11-r35
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "web-modeler"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-postgresql-web-modeler
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-postgresql-web-modeler
                  key: password
            - name: POSTGRES_DB
              value: "web-modeler"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "web-modeler" -d "dbname=web-modeler" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "web-modeler" -d "dbname=web-modeler" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
            - mountPath: /tmp
              name: tmp
            - mountPath: /opt/bitnami/postgresql/conf
              name: config
            - mountPath: /opt/bitnami/postgresql/tmp
              name: postgresql-tmp
      volumes:
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: config
        - emptyDir: {}
          name: postgresql-tmp
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: camunda-platform/templates/zeebe/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "camunda-zeebe"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: zeebe-broker
    app.kubernetes.io/version: "8.5.0"
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-broker
  serviceName: "camunda-zeebe"
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-10.0.1
        app.kubernetes.io/component: zeebe-broker
        app.kubernetes.io/version: "8.5.0"
      annotations:
        checksum/config: 05b49ad3cd689b6ded15297ee475bb44372a7ee83bfae0c2ec9cebf423606102
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: zeebe
          image: camunda/zeebe:8.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: LC_ALL
              value: C.UTF-8
            - name: K8S_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_SERVICE_NAME
              value: "camunda-zeebe"
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ZEEBE_BROKER_NETWORK_ADVERTISEDHOST
              value: "$(K8S_NAME).$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc"
            - name: ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS
              value:
                $(K8S_SERVICE_NAME)-0.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
            - name: ZEEBE_LOG_LEVEL
              value: "info"
            - name: ZEEBE_BROKER_GATEWAY_ENABLE
              value: "false"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME
              value: "io.camunda.zeebe.exporter.ElasticsearchExporter"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL
              value: "http://camunda-elasticsearch:9200"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_INDEX_PREFIX
              value: "zeebe-record"
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError"
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ZEEBE_BROKER_DATA_SNAPSHOTPERIOD
              value: 5m
            - name: ZEEBE_BROKER_DATA_DISK_FREESPACE_REPLICATION
              value: 2GB
            - name: ZEEBE_BROKER_DATA_DISK_FREESPACE_PROCESSING
              value: 3GB
          ports:
            - containerPort: 9600
              name: http
            - containerPort: 26501
              name: command
            - containerPort: 26502
              name: internal
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              scheme: HTTP
              port: 9600
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 960m
              memory: 1920Mi
            requests:
              cpu: 800m
              memory: 1200Mi
          volumeMounts:
            - name: config
              mountPath: /usr/local/bin/startup.sh
              subPath: startup.sh
            - name: data
              mountPath: /usr/local/zeebe/data
            - name: exporters
              mountPath: /exporters
            - mountPath: /tmp
              name: tmp
            - name: config
              mountPath: /usr/local/zeebe/config/application.yaml
              subPath: application.yaml
      volumes:
        - name: config
          configMap:
            name: camunda-zeebe-configuration
            defaultMode: 492
        - name: exporters
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
# yamllint disable
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - zeebe-broker
            topologyKey: kubernetes.io/hostname
# yamllint enable
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          {}
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: "10Gi"
---
# Source: camunda-platform/templates/camunda/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: camunda-camunda-platform
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
  annotations: 
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: 
  rules:
    - host: local.distro.ultrawombat.com
      http:
        paths:
          - backend:
              service:
                name: camunda-keycloak
                port:
                  number: 80
            path: /auth/
            pathType: ImplementationSpecific
          - backend:
              service:
                name: camunda-identity
                port:
                  number: 80
            path: /identity
            pathType: Prefix
          - backend:
              service:
                name: camunda-operate
                port:
                  number: 80
            path: /operate
            pathType: Prefix
          - backend:
              service:
                name: camunda-optimize
                port:
                  number: 80
            path: /optimize
            pathType: Prefix
          - backend:
              service:
                name: camunda-tasklist
                port:
                  number: 80
            path: /tasklist
            pathType: Prefix
          - backend:
              service:
                name: camunda-web-modeler-webapp
                port:
                  number: 80
            path: /modeler
            pathType: Prefix
          - backend:
              service:
                name: camunda-web-modeler-websockets
                port:
                  number:  80
            path: /modeler-ws
            pathType: Prefix
  tls:
    - hosts:
        - local.distro.ultrawombat.com
      secretName: camunda-platform
---
# Source: camunda-platform/templates/zeebe-gateway/ingress-grpc.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: camunda-zeebe-gateway-grpc
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: zeebe-gateway
    app.kubernetes.io/version: "8.5.0"
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: 
  rules:
    - host: zeebe.local.distro.ultrawombat.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: camunda-zeebe-gateway
                port:
                  number: 26500
  tls:
    - hosts:
        - zeebe.local.distro.ultrawombat.com
      secretName: camunda-platform
---
# Source: camunda-platform/templates/identity/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "camunda-identity-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: identity
    app.kubernetes.io/version: "8.5.0"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['camunda-identity:80']
  restartPolicy: Never
---
# Source: camunda-platform/templates/operate/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "camunda-operate-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: operate
    app.kubernetes.io/version: "8.5.0"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['camunda-operate:80']
  restartPolicy: Never
---
# Source: camunda-platform/templates/web-modeler/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "camunda-web-modeler-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: web-modeler
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-10.0.1
    app.kubernetes.io/component: web-modeler
    app.kubernetes.io/version: "8.5.0"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['camunda-web-modeler-webapp:80']
  restartPolicy: Never
